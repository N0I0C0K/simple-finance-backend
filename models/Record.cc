/**
 *
 *  Record.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Record.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Record::Cols::_id = "id";
const std::string Record::Cols::_fromUserId = "fromUserId";
const std::string Record::Cols::_toUserId = "toUserId";
const std::string Record::Cols::_balance = "balance";
const std::string Record::Cols::_dealTime = "dealTime";
const std::string Record::primaryKeyName = "";
const bool Record::hasPrimaryKey = false;
const std::string Record::tableName = "record";

const std::vector<typename Record::MetaData> Record::metaData_={
{"id","uint64_t","integer",8,0,0,0},
{"fromUserId","std::string","text",0,0,0,0},
{"toUserId","std::string","text",0,0,0,0},
{"balance","double","real",8,0,0,0},
{"dealTime","uint64_t","integer",8,0,0,0}
};
const std::string &Record::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Record::Record(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["fromUserId"].isNull())
        {
            fromuserid_=std::make_shared<std::string>(r["fromUserId"].as<std::string>());
        }
        if(!r["toUserId"].isNull())
        {
            touserid_=std::make_shared<std::string>(r["toUserId"].as<std::string>());
        }
        if(!r["balance"].isNull())
        {
            balance_=std::make_shared<double>(r["balance"].as<double>());
        }
        if(!r["dealTime"].isNull())
        {
            dealtime_=std::make_shared<uint64_t>(r["dealTime"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fromuserid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            touserid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            balance_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            dealtime_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Record::Record(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromuserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            touserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            balance_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dealtime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

Record::Record(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("fromUserId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["fromUserId"].isNull())
        {
            fromuserid_=std::make_shared<std::string>(pJson["fromUserId"].asString());
        }
    }
    if(pJson.isMember("toUserId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["toUserId"].isNull())
        {
            touserid_=std::make_shared<std::string>(pJson["toUserId"].asString());
        }
    }
    if(pJson.isMember("balance"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["balance"].isNull())
        {
            balance_=std::make_shared<double>(pJson["balance"].asDouble());
        }
    }
    if(pJson.isMember("dealTime"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["dealTime"].isNull())
        {
            dealtime_=std::make_shared<uint64_t>((uint64_t)pJson["dealTime"].asUInt64());
        }
    }
}

void Record::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromuserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            touserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            balance_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dealtime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

void Record::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("fromUserId"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["fromUserId"].isNull())
        {
            fromuserid_=std::make_shared<std::string>(pJson["fromUserId"].asString());
        }
    }
    if(pJson.isMember("toUserId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["toUserId"].isNull())
        {
            touserid_=std::make_shared<std::string>(pJson["toUserId"].asString());
        }
    }
    if(pJson.isMember("balance"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["balance"].isNull())
        {
            balance_=std::make_shared<double>(pJson["balance"].asDouble());
        }
    }
    if(pJson.isMember("dealTime"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["dealTime"].isNull())
        {
            dealtime_=std::make_shared<uint64_t>((uint64_t)pJson["dealTime"].asUInt64());
        }
    }
}

const uint64_t &Record::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Record::getId() const noexcept
{
    return id_;
}
void Record::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
void Record::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Record::getValueOfFromuserid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fromuserid_)
        return *fromuserid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Record::getFromuserid() const noexcept
{
    return fromuserid_;
}
void Record::setFromuserid(const std::string &pFromuserid) noexcept
{
    fromuserid_ = std::make_shared<std::string>(pFromuserid);
    dirtyFlag_[1] = true;
}
void Record::setFromuserid(std::string &&pFromuserid) noexcept
{
    fromuserid_ = std::make_shared<std::string>(std::move(pFromuserid));
    dirtyFlag_[1] = true;
}
void Record::setFromuseridToNull() noexcept
{
    fromuserid_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Record::getValueOfTouserid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(touserid_)
        return *touserid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Record::getTouserid() const noexcept
{
    return touserid_;
}
void Record::setTouserid(const std::string &pTouserid) noexcept
{
    touserid_ = std::make_shared<std::string>(pTouserid);
    dirtyFlag_[2] = true;
}
void Record::setTouserid(std::string &&pTouserid) noexcept
{
    touserid_ = std::make_shared<std::string>(std::move(pTouserid));
    dirtyFlag_[2] = true;
}
void Record::setTouseridToNull() noexcept
{
    touserid_.reset();
    dirtyFlag_[2] = true;
}

const double &Record::getValueOfBalance() const noexcept
{
    const static double defaultValue = double();
    if(balance_)
        return *balance_;
    return defaultValue;
}
const std::shared_ptr<double> &Record::getBalance() const noexcept
{
    return balance_;
}
void Record::setBalance(const double &pBalance) noexcept
{
    balance_ = std::make_shared<double>(pBalance);
    dirtyFlag_[3] = true;
}
void Record::setBalanceToNull() noexcept
{
    balance_.reset();
    dirtyFlag_[3] = true;
}

const uint64_t &Record::getValueOfDealtime() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(dealtime_)
        return *dealtime_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Record::getDealtime() const noexcept
{
    return dealtime_;
}
void Record::setDealtime(const uint64_t &pDealtime) noexcept
{
    dealtime_ = std::make_shared<uint64_t>(pDealtime);
    dirtyFlag_[4] = true;
}
void Record::setDealtimeToNull() noexcept
{
    dealtime_.reset();
    dirtyFlag_[4] = true;
}

void Record::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Record::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "fromUserId",
        "toUserId",
        "balance",
        "dealTime"
    };
    return inCols;
}

void Record::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFromuserid())
        {
            binder << getValueOfFromuserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTouserid())
        {
            binder << getValueOfTouserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBalance())
        {
            binder << getValueOfBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDealtime())
        {
            binder << getValueOfDealtime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Record::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Record::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFromuserid())
        {
            binder << getValueOfFromuserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTouserid())
        {
            binder << getValueOfTouserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBalance())
        {
            binder << getValueOfBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDealtime())
        {
            binder << getValueOfDealtime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Record::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromuserid())
    {
        ret["fromUserId"]=getValueOfFromuserid();
    }
    else
    {
        ret["fromUserId"]=Json::Value();
    }
    if(getTouserid())
    {
        ret["toUserId"]=getValueOfTouserid();
    }
    else
    {
        ret["toUserId"]=Json::Value();
    }
    if(getBalance())
    {
        ret["balance"]=getValueOfBalance();
    }
    else
    {
        ret["balance"]=Json::Value();
    }
    if(getDealtime())
    {
        ret["dealTime"]=(Json::UInt64)getValueOfDealtime();
    }
    else
    {
        ret["dealTime"]=Json::Value();
    }
    return ret;
}

Json::Value Record::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFromuserid())
            {
                ret[pMasqueradingVector[1]]=getValueOfFromuserid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTouserid())
            {
                ret[pMasqueradingVector[2]]=getValueOfTouserid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getBalance())
            {
                ret[pMasqueradingVector[3]]=getValueOfBalance();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDealtime())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfDealtime();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromuserid())
    {
        ret["fromUserId"]=getValueOfFromuserid();
    }
    else
    {
        ret["fromUserId"]=Json::Value();
    }
    if(getTouserid())
    {
        ret["toUserId"]=getValueOfTouserid();
    }
    else
    {
        ret["toUserId"]=Json::Value();
    }
    if(getBalance())
    {
        ret["balance"]=getValueOfBalance();
    }
    else
    {
        ret["balance"]=Json::Value();
    }
    if(getDealtime())
    {
        ret["dealTime"]=(Json::UInt64)getValueOfDealtime();
    }
    else
    {
        ret["dealTime"]=Json::Value();
    }
    return ret;
}

bool Record::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("fromUserId"))
    {
        if(!validJsonOfField(1, "fromUserId", pJson["fromUserId"], err, true))
            return false;
    }
    if(pJson.isMember("toUserId"))
    {
        if(!validJsonOfField(2, "toUserId", pJson["toUserId"], err, true))
            return false;
    }
    if(pJson.isMember("balance"))
    {
        if(!validJsonOfField(3, "balance", pJson["balance"], err, true))
            return false;
    }
    if(pJson.isMember("dealTime"))
    {
        if(!validJsonOfField(4, "dealTime", pJson["dealTime"], err, true))
            return false;
    }
    return true;
}
bool Record::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Record::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("fromUserId"))
    {
        if(!validJsonOfField(1, "fromUserId", pJson["fromUserId"], err, false))
            return false;
    }
    if(pJson.isMember("toUserId"))
    {
        if(!validJsonOfField(2, "toUserId", pJson["toUserId"], err, false))
            return false;
    }
    if(pJson.isMember("balance"))
    {
        if(!validJsonOfField(3, "balance", pJson["balance"], err, false))
            return false;
    }
    if(pJson.isMember("dealTime"))
    {
        if(!validJsonOfField(4, "dealTime", pJson["dealTime"], err, false))
            return false;
    }
    return true;
}
bool Record::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Record::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
