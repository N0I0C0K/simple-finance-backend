/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string User::Cols::_name = "name";
const std::string User::Cols::_password = "password";
const std::string User::Cols::_balance = "balance";
const std::string User::Cols::_lastDealTime = "lastDealTime";
const std::string User::Cols::_id = "id";
const std::string User::primaryKeyName = "";
const bool User::hasPrimaryKey = false;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"name","std::string","text",0,0,0,0},
{"password","std::string","text",0,0,0,0},
{"balance","double","real",8,0,0,0},
{"lastDealTime","uint64_t","unsigned integer",8,0,0,0},
{"id","std::string","text",0,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["balance"].isNull())
        {
            balance_=std::make_shared<double>(r["balance"].as<double>());
        }
        if(!r["lastDealTime"].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>(r["lastDealTime"].as<uint64_t>());
        }
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            balance_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            balance_=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("name"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("balance"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["balance"].isNull())
        {
            balance_=std::make_shared<double>(pJson["balance"].asDouble());
        }
    }
    if(pJson.isMember("lastDealTime"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["lastDealTime"].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>((uint64_t)pJson["lastDealTime"].asUInt64());
        }
    }
    if(pJson.isMember("id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            balance_=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("name"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("balance"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["balance"].isNull())
        {
            balance_=std::make_shared<double>(pJson["balance"].asDouble());
        }
    }
    if(pJson.isMember("lastDealTime"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["lastDealTime"].isNull())
        {
            lastdealtime_=std::make_shared<uint64_t>((uint64_t)pJson["lastDealTime"].asUInt64());
        }
    }
    if(pJson.isMember("id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
}

const std::string &User::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getName() const noexcept
{
    return name_;
}
void User::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[0] = true;
}
void User::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[0] = true;
}
void User::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[0] = true;
}

const std::string &User::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPassword() const noexcept
{
    return password_;
}
void User::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[1] = true;
}
void User::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[1] = true;
}
void User::setPasswordToNull() noexcept
{
    password_.reset();
    dirtyFlag_[1] = true;
}

const double &User::getValueOfBalance() const noexcept
{
    const static double defaultValue = double();
    if(balance_)
        return *balance_;
    return defaultValue;
}
const std::shared_ptr<double> &User::getBalance() const noexcept
{
    return balance_;
}
void User::setBalance(const double &pBalance) noexcept
{
    balance_ = std::make_shared<double>(pBalance);
    dirtyFlag_[2] = true;
}
void User::setBalanceToNull() noexcept
{
    balance_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &User::getValueOfLastdealtime() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(lastdealtime_)
        return *lastdealtime_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getLastdealtime() const noexcept
{
    return lastdealtime_;
}
void User::setLastdealtime(const uint64_t &pLastdealtime) noexcept
{
    lastdealtime_ = std::make_shared<uint64_t>(pLastdealtime);
    dirtyFlag_[3] = true;
}
void User::setLastdealtimeToNull() noexcept
{
    lastdealtime_.reset();
    dirtyFlag_[3] = true;
}

const std::string &User::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[4] = true;
}
void User::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[4] = true;
}
void User::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[4] = true;
}

void User::updateId(const uint64_t id)
{
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "password",
        "balance",
        "lastDealTime",
        "id"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBalance())
        {
            binder << getValueOfBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLastdealtime())
        {
            binder << getValueOfLastdealtime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getBalance())
        {
            binder << getValueOfBalance();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getLastdealtime())
        {
            binder << getValueOfLastdealtime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getBalance())
    {
        ret["balance"]=getValueOfBalance();
    }
    else
    {
        ret["balance"]=Json::Value();
    }
    if(getLastdealtime())
    {
        ret["lastDealTime"]=(Json::UInt64)getValueOfLastdealtime();
    }
    else
    {
        ret["lastDealTime"]=Json::Value();
    }
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[0]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[1]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getBalance())
            {
                ret[pMasqueradingVector[2]]=getValueOfBalance();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getLastdealtime())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfLastdealtime();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[4]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getBalance())
    {
        ret["balance"]=getValueOfBalance();
    }
    else
    {
        ret["balance"]=Json::Value();
    }
    if(getLastdealtime())
    {
        ret["lastDealTime"]=(Json::UInt64)getValueOfLastdealtime();
    }
    else
    {
        ret["lastDealTime"]=Json::Value();
    }
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(0, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(1, "password", pJson["password"], err, true))
            return false;
    }
    if(pJson.isMember("balance"))
    {
        if(!validJsonOfField(2, "balance", pJson["balance"], err, true))
            return false;
    }
    if(pJson.isMember("lastDealTime"))
    {
        if(!validJsonOfField(3, "lastDealTime", pJson["lastDealTime"], err, true))
            return false;
    }
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(4, "id", pJson["id"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(0, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(1, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("balance"))
    {
        if(!validJsonOfField(2, "balance", pJson["balance"], err, false))
            return false;
    }
    if(pJson.isMember("lastDealTime"))
    {
        if(!validJsonOfField(3, "lastDealTime", pJson["lastDealTime"], err, false))
            return false;
    }
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(4, "id", pJson["id"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
